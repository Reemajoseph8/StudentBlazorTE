@page "/students"
@using Services
@inject IStudentService studentService
@inject IJSRuntime jsRuntime
<h1>Students</h1>
<p>This component demonstrates managing students data.</p>

<div class="row">
    <div class="col-md-6">
        <div class="input-group col">
            <a href="/student/data" class="btn btn-primary" role="button" <i class="fas fa-user-plus"></i>Add</a>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <!--to add space btw Add button and search field-->
            <div class="input-group col">
            <input type="text" class="form-control" placeholder="Search user by first name" 
            @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
            @if (SearchString.Length > 0)
            {
                <div class="input-group-addon">
                        <button class="btn btn-danger" role="button" @onclick="ResetSearch">
                            <i class="fas fa-times" aria-hidden="true"></i>X
                    </button>
                </div>
            }
        </div>
    </div>
    </div>
</div>
<br />
@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Course Code</th>
                        <th>Course Title</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in students)
                    {
                        <tr>
                            <td>@student.Id</td>
                            <td>@student.FirstName</td>
                            <td>@student.LastName</td>
                            <td>@student.Email</td>
                            <td>@student.Coursecode</td>
                            <td>@student.Coursetitle</td>
                            <td>
                                <a href="/student/edit/@student.Id" class="btn btn-success">Edit</a>
                                <a class="btn btn-danger" @onclick="async ()=> await Delete(student)">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
        </table>
        </thead>
    </table>
}
@code {
    private List<Models.Student> students = new();

    protected List<Models.Student> searchUserData = new();
    protected Models.Student user = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }

    protected async Task GetUser()
    {
        students = studentService.GetAll();
        searchUserData = students;
    }

    protected void FilterUser() 
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            students = searchUserData
                .Where(x => x.FirstName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            students = searchUserData;
        }
    }



    private async Task Delete(Models.Student student)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure????");
        if (confirmed)
        {
            if(studentService.Delete(student.Id)){
                students.Remove(student);
            }

        }
    }

    protected override void OnInitialized()
    {
        students = studentService.GetAll();
        base.OnInitialized();
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        students = searchUserData;
    }
}